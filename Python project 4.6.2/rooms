from tkinter import*
from PIL import Image,ImageTk
from tkinter import ttk
import mysql.connector
import random
from tkinter import messagebox


class Roombooking:
#+++++++++++++++++++++++++++++++++++++++++++++++every def used########################################################################
    def __init__(self,root):
        self.root = root
        self.root.title("Hotel Management System")
        self.root.geometry("1295x605+230+220")


#====================================#######################variables###############################################################\
        self.var_contact=StringVar()
        self.var_checkin=StringVar()
        self.var_checkout=StringVar()
        self.var_roomtype=StringVar()
        self.var_roomavailable=StringVar()
        self.var_meal=StringVar()
        self.var_noofdays=StringVar()
        self.var_paidtax=StringVar()
        self.var_actualtotal=StringVar()
        self.var_total=StringVar()

######################################################################title==========================================================
        lbl_title = Label(self.root,text="ADD Room Details",font=("times new roman",18,"bold"),bg="black",fg="gold",bd=4,relief=RIDGE)
        lbl_title.place(x=0,y=0,width=1295,height=50)


##############################################################Logo==========================================================
        img2= Image.open(r"C:\Users\ACER\Desktop\Python finale 4.6.2\hotel images\logohotel.png")
        img2 = img2.resize((100,40),Image.LANCZOS)
        self.photoimg2 = ImageTk.PhotoImage(img2)

        lblimg = Label(self.root,image=self.photoimg2,bd=0,relief=RIDGE)
        lblimg.place(x=5,y=5,width=95,height=40)


##############################################################Label Frame==========================================================
        labelframeleft = LabelFrame(self.root,bd=2,relief=RIDGE,text="Room Details",padx=2,font=("times new roman",12,"bold"))
        labelframeleft.place(x=5,y=50,width=425,height=490)



##############################################################Labels and entrys==========================================================
        #Customer Contact
        lbl_cust_contact=Label(labelframeleft,text="Customer Contact: ",font=("arial",12,"bold"),padx=2,pady=6)
        lbl_cust_contact.grid(row=0,column=0,sticky=W)
        
        entry_contact=ttk.Entry(labelframeleft,textvariable=self.var_contact,width=20,font=("arial",12,"bold")) 
        entry_contact.grid(row=0,column=1,sticky=W)

        #fetch data button
        btnFetchData=Button(labelframeleft,text="fetch Data",font=("arial",10,"bold"),bg="black",fg="gold",width=8)
        btnFetchData.place(x=350,y=4)

        #check_in Date
        check_in_date=Label(labelframeleft,font=("arial",12,"bold"),text="Check_in_Date:",padx=2,pady=6)
        check_in_date.grid(row=1,column=0,sticky=W)
        txtcheck_in_date=ttk.Entry(labelframeleft,textvariable=self.var_checkin,font=("arial",13,"bold"),width=26)
        txtcheck_in_date.grid(row=1,column=1,sticky=W)

        #check_out Date
        check_out_date=Label(labelframeleft,font=("arial",12,"bold"),text="Check_out_Date:",padx=2,pady=6)
        check_out_date.grid(row=2,column=0,sticky=W)
        txtcheck_out_date=ttk.Entry(labelframeleft,textvariable=self.var_checkout,font=("arial",13,"bold"),width=26)
        txtcheck_out_date.grid(row=2,column=1,sticky=W)


        #Room Type
        label_RoomType=Label(labelframeleft,font=("arial",12,"bold"),text="Room Type:",padx=2,pady=6)
        label_RoomType.grid(row=3,column=0,sticky=W)

        combo_RoomType=ttk.Combobox(labelframeleft,textvariable=self.var_roomtype,font=("arial",12,"bold"),width=24,state="readonly")
        combo_RoomType["value"]=("Single","Double","Lauxary")
        combo_RoomType.current(0)
        combo_RoomType.grid(row=3,column=1)

        #Available Room
        lblRoomAvailable=Label(labelframeleft,font=("arial",12,"bold"),text="Available Room:",padx=2,pady=6)
        lblRoomAvailable.grid(row=4,column=0,sticky=W)
        txtRoomAvailable=ttk.Entry(labelframeleft,textvariable=self.var_roomavailable,font=("arial",12,"bold"),width=26)
        txtRoomAvailable.grid(row=4,column=1)

        # Meal
        lblMeal=Label(labelframeleft,font=("arial",12,"bold"),text="Meal:",padx=2,pady=6)
        lblMeal.grid(row=5,column=0,sticky=W)
        txtMeal=ttk.Entry(labelframeleft,textvariable=self.var_meal,font=("arial",12,"bold"),width=26)
        txtMeal.grid(row=5,column=1)

        # No of Days
        lblNoOfDays=Label(labelframeleft,font=("arial",12,"bold"),text="No Of Days:",padx=2,pady=6)
        lblNoOfDays.grid(row=6,column=0,sticky=W)
        txtNoOfDays=ttk.Entry(labelframeleft,textvariable=self.var_noofdays,font=("arial",12,"bold"),width=26)
        txtNoOfDays.grid(row=6,column=1)

          # Paid Tax
        lblMeal=Label(labelframeleft,font=("arial",12,"bold"),text="Paid Tax:",padx=2,pady=6)
        lblMeal.grid(row=7,column=0,sticky=W)
        txtMeal=ttk.Entry(labelframeleft,textvariable=self.var_paidtax,font=("arial",12,"bold"),width=26)
        txtMeal.grid(row=7,column=1)

          # Subtotal
        lblMeal=Label(labelframeleft,font=("arial",12,"bold"),text="Sub total:",padx=2,pady=6)
        lblMeal.grid(row=8,column=0,sticky=W)
        txtMeal=ttk.Entry(labelframeleft,textvariable=self.var_actualtotal,font=("arial",12,"bold"),width=26)
        txtMeal.grid(row=8,column=1)

          # Total Cost
        lblMeal=Label(labelframeleft,font=("arial",12,"bold"),text="Total Cost:",padx=2,pady=6)
        lblMeal.grid(row=9,column=0,sticky=W)
        txtMeal=ttk.Entry(labelframeleft,textvariable=self.var_total ,font=("arial",12,"bold"),width=26)
        txtMeal.grid(row=9,column=1)

#=============================Buttons===================##############################################################
        btn_frame=Frame(labelframeleft,bd=2,relief=RIDGE)
        btn_frame.place(x=0,y=400,width=415,height=40)

        btnAdd=Button(btn_frame,text="Add",font=("arial",12,"bold"),bg="black",fg="gold",width=9,cursor="hand1",command=self.add_data)
        btnAdd.grid(row=0,column=0,padx=2)

        btnUpdate=Button(btn_frame,text="Update",font=("arial",12,"bold"),bg="black",fg="gold",width=9,cursor="hand1",command=self.update)
        btnUpdate.grid(row=0,column=1,padx=2)

        btnDelete=Button(btn_frame,text="Delete",font=("arial",12,"bold"),bg="black",fg="gold",width=9,cursor="hand1",command=self.mDelete)
        btnDelete.grid(row=0,column=2,padx=2)

        btnReset=Button(btn_frame,text="Reset",font=("arial",12,"bold"),bg="black",fg="gold",width=9,cursor="hand1",command=self.reset)
        btnReset.grid(row=0,column=3,padx=2)


#===========================================Table Frame##########################################################

        Table_Frame = LabelFrame(self.root,bd=2,relief=RIDGE,text="",padx=2,font=("times new roman",12,"bold"))
        Table_Frame.place(x=435,y=50,width=860,height=490)

        lblSearchBy=Label(Table_Frame,font=("arial",12,"bold"),text="Customer Database ",bg="black",fg="white")
        lblSearchBy.grid(row=0,column=0,sticky=W)

       # self.serch_var=StringVar()
        #combo_Serach=ttk.Combobox(Table_Frame,textvariable=self.serch_var,font=("arial",12,"bold"),width=27,state="readonly")
       # combo_Serach["value"]=("Mobile","Ref")
        #combo_Serach.current(0)
        #combo_Serach.grid(row=0,column=1,padx=2)

       # self.txt_search=StringVar()
       # txtSearch=ttk.Entry(Table_Frame,textvariable=self.txt_search,font=("arial",13,"bold"),width=24)
       # txtSearch.grid(row=0,column=2,padx=2)

        #btnSearch=Button(Table_Frame,text="Search",command=self.search,font=("arial",12,"bold"),bg="black",fg="gold",width=7)
        #btnSearch.grid(row=0,column=3,padx=1)

        #btnShowAll=Button(Table_Frame,text="Show all",command=self.fetch_data,font=("arial",12,"bold"),bg="black",fg="gold",width=7)
        #btnShowAll.grid(row=0,column=4,padx=1)


#===============================================Show Data Table######################################################
        details_table=Frame(Table_Frame,bd=2,relief=RIDGE)
        details_table.place(x=0,y=50,width=860,height=350)

        Scroll_x=ttk.Scrollbar(details_table,orient=HORIZONTAL)
        Scroll_y=ttk.Scrollbar(details_table,orient=VERTICAL)

        self.Cust_Details_Table=ttk.Treeview(details_table,column=("Contact","Checkin","Checkout","Roomtype","Roomavailable","Meal","NoOfdays"),xscrollcommand=Scroll_x.set,yscrollcommand=Scroll_y.set)
        
        Scroll_x.pack(side=BOTTOM,fill=X)
        Scroll_y.pack(side=RIGHT,fill=Y)

        Scroll_x.config(command=self.Cust_Details_Table.xview)
        Scroll_y.config(command=self.Cust_Details_Table.yview)

        self.Cust_Details_Table.heading("Contact",text="Mobile")
        self.Cust_Details_Table.heading("Checkin",text="Check-in")
        self.Cust_Details_Table.heading("Checkout",text="Check-out")
        self.Cust_Details_Table.heading("Roomtype",text="Room Type")
        self.Cust_Details_Table.heading("Roomavailable",text="Room No")
        self.Cust_Details_Table.heading("Meal",text="Meal")
        self.Cust_Details_Table.heading("NoOfdays",text="NoOfDays")
    
        

        self.Cust_Details_Table.column("Contact",width=100)
        self.Cust_Details_Table.column("Checkin",width=100)
        self.Cust_Details_Table.column("Checkout",width=100)
        self.Cust_Details_Table.column("Roomtype",width=100)
        self.Cust_Details_Table.column("Roomavailable",width=100)
        self.Cust_Details_Table.column("Meal",width=100)
        self.Cust_Details_Table.column("NoOfdays",width=100)
        
        self.Cust_Details_Table["show"]="headings"
        self.Cust_Details_Table.pack(fill=BOTH)
        self.Cust_Details_Table.bind("<ButtonRelease-1>",self.get_ceursor)
        self.fetch_data()


    def add_data(self):
       if self.var_contact.get()=="":
           messagebox.showerror("Error","All fields are required",parent=self.root)
       else:
            try:
             conn=mysql.connector.connect(host="localhost",username="root",password="",database="pos_db")
             my_cursor=conn.cursor()
             my_cursor.execute("insert into room values(%s,%s,%s,%s,%s,%s,%s)",(
                                                                                self.var_checkin.get(),
                                                                                self.var_contact.get(),
                                                                                self.var_checkout.get(),
                                                                                self.var_roomtype.get(),
                                                                                self.var_roomavailable.get(),
                                                                                self.var_meal.get(),
                                                                                self.var_noofdays.get()
                                                                                ))
             conn.commit()
             self.fetch_data()
             conn.close()
             messagebox.showinfo("Success","Customer has been added",parent=self.root)
            except Exception as es:
               messagebox.showwarning("Warning",f"Something went wrong:{str(es)}",parent=self.root)
        
    def fetch_data(self):
       conn=mysql.connector.connect(host="localhost",username="root",password="",database="pos_db")
       my_cursor=conn.cursor()
       my_cursor.execute("SELECT * FROM room")
       rows=my_cursor.fetchall()
       if len(rows)!=0:
          self.Cust_Details_Table.delete(* self.Cust_Details_Table.get_children())
          for i in rows:
             self.Cust_Details_Table.insert("",END,values=i)
             conn.commit()
       conn.close() 

    def get_ceursor(self,event=""):
        ceursor_row=self.Cust_Details_Table.focus()
        content=self.Cust_Details_Table.item(ceursor_row)
        row=content["values"]

        self.var_contact.set(row[0])
        self.var_checkin.set(row[1])
        self.var_checkout.set(row[2])
        self.var_roomtype.set(row[3])
        self.var_roomavailable.set(row[4])
        self.var_meal.set(row[5])
        self.var_noofdays.set(row[6])
       
    def update(self):
       if self.var_contact.get()=="":
          messagebox.showerror("Error","Please enter mobile number",parent=self.root)
       else:
          conn=mysql.connector.connect(host="localhost",username="root",password="",database="pos_db")
          my_cursor=conn.cursor()
          my_cursor.execute("update room set available=%s,Check_in=%s,Check_out=%s,Roomtype=%s,Meal=%s,NoOfdays=%s where Contact=%s",(
                                                                                                                                                                
                self.var_roomavailable.get(),
                self.var_checkin.get(),
                self.var_checkout.get(),
                self.var_roomtype.get(),
                self.var_meal.get(),
                self.var_noofdays.get(),
                self.var_contact.get()
                                                                                                                                                        ))       
          conn.commit()
          self.fetch_data()
          conn.close()
          messagebox.showinfo("Update","Customer details have been updated successfully",parent=self.root) 

    def mDelete(self):
       mDelete=messagebox.askyesno("Hotel Management System","Do you want to delete this Customer",parent=self.root)
       if mDelete>0:
          conn=mysql.connector.connect(host="localhost",username="root",password="",database="pos_db")
          my_cursor=conn.cursor()
          query="delete from room WHERE noOfdays=%s"
          value=(self.var_noofdays.get(),)
          my_cursor.execute(query,value)
       else:
          if not mDelete:
             return
       conn.commit()
       self.fetch_data()
       conn.close()

    def reset(self):
        
                self.var_roomavailable.set(),
                self.var_checkin.set(),
                self.var_checkout.set(),
                self.var_roomtype.set(),
                self.var_meal.set(),
                self.var_noofdays.set(),
                self.var_contact.set()
      
                                                                  
    def fetch_data(self):
       conn=mysql.connector.connect(host="localhost",username="root",password="",database="pos_db")
       my_cursor=conn.cursor()
       my_cursor.execute("SELECT * from room")
       rows=my_cursor.fetchall()
       if len(rows)!=0:
          self.Cust_Details_Table.delete(* self.Cust_Details_Table.get_children())
          for i in rows:
             self.Cust_Details_Table.insert("",END,values=i)
             conn.commit()
       conn.close()                                          


if __name__ == "__main__":
 root = Tk()
 obj=Roombooking(root)
 root.mainloop()

